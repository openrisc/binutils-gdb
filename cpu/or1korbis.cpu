; OpenRISC Basic Instruction Set 32-bit (ORBIS)  -*- Scheme -*-
; Copyright 2000-2014 Free Software Foundation, Inc.
; Contributed for OR32 by Johan Rydberg, jrydberg@opencores.org
; Modified by Julius Baxter, juliusbaxter@gmail.com
; Modified by Peter Gavin, pgavin@gmail.com
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, see <http://www.gnu.org/licenses/>

; Instruction fields.

; Hardware for immediate operands
(dnh h-simm16      "16-bit signed immediate"   ((MACH ORBIS-MACHS)) (immediate (INT 16)) () () ())
(dnh h-uimm16      "16-bit unsigned immediate" ()                   (immediate (UINT 16)) () () ())
(dnh h-uimm6       "6-bit unsigned immediate"  ()                   (immediate (UINT 6)) () () ())

(dnh h-uimm2       "2-bit unsigned immediate"  ()                   (immediate (UINT 2)) () () ())

(dnh h-uimm1       "1-bit unsigned immediate"  ()                   (immediate (UINT 1)) () () ())

; Hardware for the (internal) atomic registers
(dsh h-atomic-reserve "atomic reserve flag" () (register BI))
(dsh h-atomic-address "atomic reserve address" () (register SI))

; Instruction classes.
(dnf f-opcode      "insn opcode"               ((MACH ORBIS-MACHS)) 31 6)

; Register fields.
(dnf f-r1          "r1"                        ((MACH ORBIS-MACHS)) 25 5)
(dnf f-r2          "r2"                        ((MACH ORBIS-MACHS)) 20 5)
(dnf f-r3          "r3"                        ((MACH ORBIS-MACHS)) 15 5)

; Sub fields
(dnf f-op-25-2     "op-25-2"                   ((MACH ORBIS-MACHS)) 25 2) ;; nop
(dnf f-op-25-5     "op-25-5"                   ((MACH ORBIS-MACHS)) 25 5) ;; sys, trap, *sync, sf*
(dnf f-op-16-1     "op-16-1"                   ((MACH ORBIS-MACHS)) 16 1) ;; movhi,macrc
(dnf f-op-7-5      "op-7-5"                    ((MACH ORBIS-MACHS)) 7 5)
(dnf f-op-7-4      "op-7-4"                    ((MACH ORBIS-MACHS)) 7 4)
(dnf f-op-7-3      "op-7-3"                    ((MACH ORBIS-MACHS)) 7 3)
(dnf f-op-3-4      "op-3-4"                    ((MACH ORBIS-MACHS)) 3 4)
(dnf f-op-9-2      "op-9-2"                    ((MACH ORBIS-MACHS)) 9 2) ;; alu ops upper opcode
(dnf f-op-9-4      "op-9-4"                    ((MACH ORBIS-MACHS)) 9 4) ;;
(dnf f-op-7-8      "op-7-8"                    ((MACH ORBIS-MACHS)) 7 8)
(dnf f-op-7-2      "op-7-2"                    ((MACH ORBIS-MACHS)) 7 2) ;; alu lower upper opc,shroti
(dnf f-op-3-1      "op-3-1"                    ((MACH ORBIS-MACHS)) 3 1)
(dnf f-op-2-1      "op-2-1"                    ((MACH ORBIS-MACHS)) 2 1)
(dnf f-op-1-1      "op-1-1"                    ((MACH ORBIS-MACHS)) 1 1)
(dnf f-op-0-1      "op-0-1"                    ((MACH ORBIS-MACHS)) 0 1)

; Reserved fields
(dnf f-resv-25-26  "resv-25-26"                ((MACH ORBIS-MACHS) RESERVED) 25 26)
(dnf f-resv-25-10  "resv-25-10"                ((MACH ORBIS-MACHS) RESERVED) 25 10)
(dnf f-resv-25-5   "resv-25-5"                 ((MACH ORBIS-MACHS) RESERVED) 25 5)
(dnf f-resv-23-8   "resv-23-8"                 ((MACH ORBIS-MACHS) RESERVED) 23 8)
(dnf f-resv-20-21  "resv-20-21"                ((MACH ORBIS-MACHS) RESERVED) 20 21)
(dnf f-resv-20-5   "resv-20-5"                 ((MACH ORBIS-MACHS) RESERVED) 20 5)
(dnf f-resv-20-4   "resv-20-4"                 ((MACH ORBIS-MACHS) RESERVED) 20 4)
(dnf f-resv-15-8   "resv-15-8"                 ((MACH ORBIS-MACHS) RESERVED) 15 8)
(dnf f-resv-15-6   "resv-15-6"                 ((MACH ORBIS-MACHS) RESERVED) 15 6)
(dnf f-resv-10-11  "resv-10-11"                ((MACH ORBIS-MACHS) RESERVED) 10 11)
(dnf f-resv-10-7   "resv-10-7"                 ((MACH ORBIS-MACHS) RESERVED) 10 7)
(dnf f-resv-10-3   "resv-10-3"                 ((MACH ORBIS-MACHS) RESERVED) 10 3)
(dnf f-resv-10-1   "resv-10-1"                 ((MACH ORBIS-MACHS) RESERVED) 10 1)
(dnf f-resv-8-1    "resv-8-1"                  ((MACH ORBIS-MACHS) RESERVED) 8 1)
(dnf f-resv-7-4    "resv-7-4"                  ((MACH ORBIS-MACHS) RESERVED) 7 4)
(dnf f-resv-5-2    "resv-5-2"                  ((MACH ORBIS-MACHS) RESERVED) 5 2)
(dnf f-resv-3-1    "resv-3-1"                  ((MACH ORBIS-MACHS) RESERVED) 3 1)
(dnf f-resv-2-1    "resv-2-1"                  ((MACH ORBIS-MACHS) RESERVED) 2 1)
(dnf f-resv-1-1    "resv-1-1"                  ((MACH ORBIS-MACHS) RESERVED) 1 1)

(dnf f-imm16-25-5  "imm16-25-5"                ((MACH ORBIS-MACHS)) 25  5)
(dnf f-imm16-10-11 "imm16-10-11"               ((MACH ORBIS-MACHS)) 10 11)

; PC relative, 26-bit (2 shifted to right)
(df f-disp26
    "disp26"
    ((MACH ORBIS-MACHS) PCREL-ADDR)
    25
    26
    INT
    ((value pc) (sra IAI (sub IAI value pc) (const 2)))
    ((value pc) (add IAI (sll IAI value (const 2)) pc))
    )

; PC relative, 21-bit, 13 shifted to right, aligned.
; Note that the alignment means that we can't simplify relocations in the
; same way as we do for pc-relative, so we use ABS-ADDR instead of PCREL-ADDR.
(df f-disp21
    "disp21"
    ((MACH ORBIS-MACHS) ABS-ADDR)
    20
    21
    INT
    ((value pc)
     (sub IAI (sra IAI value (const 13)) (sra IAI pc (const 13))))
    ((value pc)
     (sll IAI (add IAI value (sra IAI pc (const 13))) (const 13)))
    )

; Immediates.
(dnf f-uimm16    "uimm16"                      ((MACH ORBIS-MACHS))          15 16)
(df  f-simm16    "simm16"                      ((MACH ORBIS-MACHS) SIGN-OPT) 15 16 INT #f #f)
(dnf f-uimm6     "uimm6"                       ((MACH ORBIS-MACHS))          5  6) ;; shroti
(dnf f-uimm2d    "uimm2d"                      ((MACH ORBIS-MACHS))          2  2) ;; 
(dnf f-uimm2s    "uimm2s"                      ((MACH ORBIS-MACHS))          4  2) ;; 
(dnf f-uimm1d    "uimm1d"                      ((MACH ORBIS-MACHS))          2  1) ;; 
(dnf f-uimm1s    "uimm1s"                      ((MACH ORBIS-MACHS))          4  1) ;; 
(dnf f-uimm1u    "uimm1u"                      ((MACH ORBIS-MACHS))          2  1) ;; 
(dnf f-uimm1a    "uimm1a"                      ((MACH ORBIS-MACHS))          1  1) ;; 
(dnf f-uimm1b    "uimm1b"                      ((MACH ORBIS-MACHS))          0  1) ;; 

(define-multi-ifield
  (name f-uimm16-split)
  (comment "16-bit split unsigned immediate")
  (attrs (MACH ORBIS-MACHS))
  (mode UINT)
  (subfields f-imm16-25-5 f-imm16-10-11)
  (insert (sequence ()
                    (set (ifield f-imm16-25-5)
                         (and (srl (ifield f-uimm16-split)
                                   (const 11))
                              (const #x1f)))
                    (set (ifield f-imm16-10-11)
                         (and (ifield f-uimm16-split)
                              (const #x7ff)))))
  (extract 
           (set (ifield f-uimm16-split)
                (trunc UHI
                       (or (sll (ifield f-imm16-25-5)
                                (const 11))
                           (ifield f-imm16-10-11)))))
  )

(define-multi-ifield
  (name f-simm16-split)
  (comment "16-bit split signed immediate")
  (attrs (MACH ORBIS-MACHS) SIGN-OPT)
  (mode INT)
  (subfields f-imm16-25-5 f-imm16-10-11)
  (insert (sequence ()
                    (set (ifield f-imm16-25-5)
                         (and (sra (ifield f-simm16-split)
                                   (const 11))
                              (const #x1f)))
                    (set (ifield f-imm16-10-11)
                         (and (ifield f-simm16-split)
                              (const #x7ff)))))
  (extract 
           (set (ifield f-simm16-split)
                (trunc HI
                       (or (sll (ifield f-imm16-25-5)
                                (const 11))
                           (ifield f-imm16-10-11)))))
  )

; Enums.

; insn-opcode: bits 31-26
(define-normal-insn-enum 
  insn-opcode "insn main opcode enums" ((MACH ORBIS-MACHS)) OPC_ f-opcode
  (("J"            #x00)
   ("JAL"          #x01)
   ("ADRP"       #x02)
   ("BNF"          #x03)
   ("BF"           #x04)
   ("NOP"          #x05)
   ("MOVHIMACRC"   #x06)
   ("SYSTRAPSYNCS" #x08)
   ("RFE"          #x09)
   ("VECTOR"       #x0a)
   ("JR"           #x11)
   ("JALR"         #x12)
   ("MACI"         #x13)
   ("LWA"          #x1b)
   ("CUST1"        #x1c)
   ("CUST2"        #x1d)
   ("CUST3"        #x1e)
   ("CUST4"        #x1f)
   ("LD"           #x20)
   ("LWZ"          #x21)
   ("LWS"          #x22)
   ("LBZ"          #x23)
   ("LBS"          #x24)
   ("LHZ"          #x25)
   ("LHS"          #x26)
   ("ADDI"         #x27)
   ("ADDIC"        #x28)
   ("ANDI"         #x29)
   ("ORI"          #x2a)
   ("XORI"         #x2b)
   ("MULI"         #x2c)
   ("MFSPR"        #x2d)
   ("SHROTI"       #x2e)
   ("SFI"          #x2f)
   ("MTSPR"        #x30)
   ("MAC"          #x31)
   ("FLOAT"        #x32)
   ("SWA"          #x33)
   ("SD"           #x34)
   ("SW"           #x35)
   ("SB"           #x36)
   ("SH"           #x37)
   ("ALU"          #x38)
   ("SF"           #x39)
   ("CUST5"        #x3c)
   ("CUST6"        #x3d)
   ("CUST7"        #x3e)
;   ("CUST8"          #x3f) 
   ("DSP"          #x3f) 
  )
)

(define-normal-insn-enum insn-opcode-systrapsyncs 
  "systrapsync insn opcode enums" ((MACH ORBIS-MACHS)) 
  OPC_SYSTRAPSYNCS_ f-op-25-5
    (("SYSCALL" #x00 )
     ("TRAP" #x08 )
     ("MSYNC" #x10 )
     ("PSYNC" #x14 )
     ("CSYNC" #x18 )
    )
)

(define-normal-insn-enum insn-opcode-movehimacrc
  "movhi/macrc insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_MOVHIMACRC_ f-op-16-1
  (("MOVHI" #x0)
   ("MACRC" #x1)
  )
)

;; ??? Most of the ALU_REGREG space should be using a f-op-10-11 opcode
;; instead of f-op-3-4 plus extra bits in f-resv-10-7.

(define-normal-insn-enum insn-opcode-mac
  "multiply/accumulate insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_MAC_ f-op-3-4
  (("MAC"   #x1)
   ("MSB"   #x2)
   ("MACU"  #x3)
   ("MSBU"  #x4)
   )
  )

(define-normal-insn-enum insn-opcode-shrots 
  "shift/rotate insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_SHROTS_ f-op-7-2
    (("SLL" #x0 )
     ("SRL" #x1 )
     ("SRA" #x2 )
     ("ROR" #x3 )
    )
)

(define-normal-insn-enum insn-opcode-extbhs
  "extend byte/half opcode enums" ((MACH ORBIS-MACHS))
  OPC_EXTBHS_ f-op-9-4
  (("EXTHS" #x0)
   ("EXTBS" #x1)
   ("EXTHZ" #x2)
   ("EXTBZ" #x3)
   )
)

(define-normal-insn-enum insn-opcode-extws
  "extend word opcode enums" ((MACH ORBIS-MACHS))
  OPC_EXTWS_ f-op-9-4
  (("EXTWS" #x0)
   ("EXTWZ" #x1)
   )
)

(define-normal-insn-enum insn-opcode-alu-regreg 
  "alu reg/reg insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_ALU_REGREG_ f-op-3-4
  (("ADD"   #x0)
   ("ADDC"  #x1)
   ("SUB"   #x2)
   ("AND"   #x3)
   ("OR"    #x4)
   ("XOR"   #x5)
   ("MUL"   #x6)
   ("MULD"  #x7)
   ("SHROT" #x8)
   ("DIV"   #x9)
   ("DIVU"  #xA)
   ("MULU"  #xB)
   ("EXTBH" #xC)
   ("EXTW"  #xD)
   ("MULDU" #xD)
   ("CMOV"  #xE)
   ("FFL1"  #xF)
   )
)

(define-normal-insn-enum insn-opcode-setflag
  "setflag insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_SF_ f-op-25-5
    (("EQ"  #x00)
     ("NE"  #x01)
     ("GTU" #x02)
     ("GEU" #x03)
     ("LTU" #x04)
     ("LEU" #x05)
     ("GTS" #x0A)
     ("GES" #x0B)
     ("LTS" #x0C)
     ("LES" #x0D)
    )
)


; Instruction operands.

(dnop sys-sr            "supervision register"             ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-sr            f-nil)
(dnop sys-esr0          "exception supervision register 0" ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-esr0          f-nil)
(dnop sys-epcr0         "exception PC register 0"          ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-epcr0         f-nil)

(dnop sys-sr-lee        "SR little endian enable bit"      ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-sr-lee        f-nil)
(dnop sys-sr-f          "SR flag bit"                      ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-sr-f          f-nil)
(dnop sys-sr-cy         "SR carry bit"                     ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-sr-cy         f-nil)
(dnop sys-sr-ov         "SR overflow bit"                  ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-sr-ov         f-nil)
(dnop sys-sr-ove        "SR overflow exception enable bit" ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-sr-ove        f-nil)
(dnop sys-cpucfgr-ob64s "CPUCFGR ORBIS64 supported bit"    ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-cpucfgr-ob64s f-nil)
(dnop sys-cpucfgr-nd    "CPUCFGR no delay bit"             ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-cpucfgr-nd    f-nil)
(dnop sys-fpcsr-rm      "floating point round mode"        ((MACH ORBIS-MACHS) SEM-ONLY) h-sys-fpcsr-rm      f-nil)

(dnop mac-machi         "MAC HI result register"           ((MACH ORBIS-MACHS) SEM-ONLY) h-mac-machi         f-nil)
(dnop mac-maclo         "MAC LO result register"           ((MACH ORBIS-MACHS) SEM-ONLY) h-mac-maclo         f-nil)

(dnop atomic-reserve    "atomic reserve flag"              ((MACH ORBIS-MACHS) SEM-ONLY) h-atomic-reserve    f-nil)
(dnop atomic-address    "atomic address"                   ((MACH ORBIS-MACHS) SEM-ONLY) h-atomic-address    f-nil)

(dnop uimm6             "uimm6"                            ((MACH ORBIS-MACHS))          h-uimm6             f-uimm6)

(dnop rD                "destination register"             ((MACH ORBIS-MACHS))          h-gpr               f-r1)
(dnop rA                "source register A"                ((MACH ORBIS-MACHS))          h-gpr               f-r2)
(dnop rB                "source register B"                ((MACH ORBIS-MACHS))          h-gpr               f-r3)

(dnop uimm2d            "uimm2d"                           ((MACH ORBIS-MACHS))          h-uimm2             f-uimm2d)
(dnop uimm2s            "uimm2s"                           ((MACH ORBIS-MACHS))          h-uimm2             f-uimm2s)
(dnop uimm1d            "uimm1d"                           ((MACH ORBIS-MACHS))          h-uimm1             f-uimm1d)
(dnop uimm1s            "uimm1s"                           ((MACH ORBIS-MACHS))          h-uimm1             f-uimm1s)

(dnop uimm1u            "uimm1u"                           ((MACH ORBIS-MACHS))          h-uimm1             f-uimm1u)
(dnop uimm1a            "uimm1a"                           ((MACH ORBIS-MACHS))          h-uimm1             f-uimm1a)
(dnop uimm1b            "uimm1b"                           ((MACH ORBIS-MACHS))          h-uimm1             f-uimm1b)

(define-operand
  (name disp26)
  (comment "pc-rel 26 bit")
  (attrs (MACH ORBIS-MACHS))
  (type h-iaddr)
  (index f-disp26)
  (handlers (parse "disp26"))
  )

(define-operand
  (name disp21)
  (comment "pc-rel 21 bit")
  (attrs (MACH ORBIS-MACHS))
  (type h-iaddr)
  (index f-disp21)
  (handlers (parse "disp21"))
  )

(define-operand
  (name simm16)
  (comment "16-bit signed immediate")
  (attrs (MACH ORBIS-MACHS) SIGN-OPT)
  (type h-simm16)
  (index f-simm16)
  (handlers (parse "simm16"))
  )

(define-operand
  (name uimm16)
  (comment "16-bit unsigned immediate")
  (attrs (MACH ORBIS-MACHS))
  (type h-uimm16)
  (index f-uimm16)
  (handlers (parse "uimm16"))
  )

(define-operand
  (name simm16-split)
  (comment "split 16-bit signed immediate")
  (attrs (MACH ORBIS-MACHS) SIGN-OPT)
  (type h-simm16)
  (index f-simm16-split)
  (handlers (parse "simm16_split"))
)

(define-operand
  (name uimm16-split)
  (comment "split 16-bit unsigned immediate")
  (attrs (MACH ORBIS-MACHS))
  (type h-uimm16)
  (index f-uimm16-split)
  (handlers (parse "uimm16_split"))
)

; Instructions.

; Branch releated instructions 

(define-pmacro (cti-link-return)
  (set IAI (reg h-gpr 9) (add pc (if sys-cpucfgr-nd 4 8)))
  )
(define-pmacro (cti-transfer-control condition target)
  ;; this mess is necessary because we're
  ;; skipping the delay slot, but it's
  ;; actually the start of the next basic
  ;; block
  (sequence ()
            (if condition
                (delay 1 (set IAI pc target))
                (if sys-cpucfgr-nd
                    (delay 1 (set IAI pc (add pc 4))))
                )
            (if sys-cpucfgr-nd
                (skip 1)
                )
            )
  )

(define-pmacro
  (define-cti
    cti-name
    cti-comment
    cti-attrs
    cti-syntax
    cti-format
    cti-semantics)
  (begin
    (dni
      cti-name
      cti-comment
      (.splice (MACH ORBIS-MACHS) DELAYED-CTI NOT-IN-DELAY-SLOT (.unsplice cti-attrs))
      cti-syntax
      cti-format
      (cti-semantics)
      ()
      )
    )
  )

(define-cti
  l-j
  "jump (pc-relative iaddr)"
  (!COND-CTI UNCOND-CTI)
  "l.j ${disp26}"
  (+ OPC_J disp26)
  (.pmacro ()
           (cti-transfer-control 1 disp26)
           )
  )

(dni l-adrp "adrp reg/disp21"
    ((MACH ORBIS-MACHS))
    "l.adrp $rD,${disp21}"
    (+ OPC_ADRP rD disp21)
    (set UWI rD disp21)
    ()
  )

(define-cti
  l-jal
  "jump and link (pc-relative iaddr)"
  (!COND-CTI UNCOND-CTI)
  "l.jal ${disp26}"
  (+ OPC_JAL disp26)
  (.pmacro ()
           (sequence ()
                     (cti-link-return)
                     (cti-transfer-control 1 disp26)
                     )
           )
  )

(define-cti
  l-jr
  "jump register (absolute iaddr)"
  (!COND-CTI UNCOND-CTI)
  "l.jr $rB"
  (+ OPC_JR (f-resv-25-10 0) rB (f-resv-10-11 0))
  (.pmacro ()
           (cti-transfer-control 1 rB)
           )
  )

(define-cti
  l-jalr
  "jump register and link (absolute iaddr)"
  (!COND-CTI UNCOND-CTI)
  "l.jalr $rB"
  (+ OPC_JALR (f-resv-25-10 0) rB (f-resv-10-11 0) )
  (.pmacro ()
           (sequence ()
                     (cti-link-return)
                     (cti-transfer-control 1 rB)
                     )
           )
  )

(define-cti
  l-bnf
  "branch if condition bit not set (pc relative iaddr)"
  (COND-CTI !UNCOND-CTI)
  "l.bnf ${disp26}"
  (+ OPC_BNF disp26)
  (.pmacro ()
           (cti-transfer-control (not sys-sr-f) disp26)
           )
  )

(define-cti
  l-bf
  "branch if condition bit set (pc relative iaddr)"
  (COND-CTI !UNCOND-CTI)
  "l.bf ${disp26}"
  (+ OPC_BF disp26)
  (.pmacro ()
           (cti-transfer-control sys-sr-f disp26)
           )
  )

(dni l-trap "trap (exception)"
     ((MACH ORBIS-MACHS) NOT-IN-DELAY-SLOT)
     "l.trap ${uimm16}"
     (+ OPC_SYSTRAPSYNCS OPC_SYSTRAPSYNCS_TRAP (f-resv-20-5 0) uimm16)
     ; Do exception entry handling in C function, PC set based on SR state
     (raise-exception EXCEPT-TRAP)
     ()
)


(dni l-sys "syscall (exception)"
     ; This function may not be in delay slot
     ((MACH ORBIS-MACHS) NOT-IN-DELAY-SLOT)

     "l.sys ${uimm16}"
     (+ OPC_SYSTRAPSYNCS OPC_SYSTRAPSYNCS_SYSCALL (f-resv-20-5 0) uimm16)
     ; Do exception entry handling in C function, PC set based on SR state
     (raise-exception EXCEPT-SYSCALL)
     ()
)

(dni l-msync "memory sync"
     ((MACH ORBIS-MACHS))
     "l.msync"
     (+ OPC_SYSTRAPSYNCS OPC_SYSTRAPSYNCS_MSYNC (f-resv-20-21 0))
     (nop)
     ()
)

(dni l-psync "pipeline sync"
     ((MACH ORBIS-MACHS))
     "l.psync"
     (+ OPC_SYSTRAPSYNCS OPC_SYSTRAPSYNCS_PSYNC (f-resv-20-21 0))
     (nop)
     ()
)

(dni l-csync "context sync"
     ((MACH ORBIS-MACHS))
     "l.csync"
     (+ OPC_SYSTRAPSYNCS OPC_SYSTRAPSYNCS_CSYNC (f-resv-20-21 0))
     (nop)
     ()
)

(dni l-rfe "return from exception"
     ; This function may not be in delay slot
     ((MACH ORBIS-MACHS) NOT-IN-DELAY-SLOT FORCED-CTI)

     "l.rfe"
     (+ OPC_RFE (f-resv-25-26 0))
     (c-call VOID "@cpu@_rfe")
     ()
)


; Misc instructions

; l.nop with immediate must be first so it handles all l.nops in sim
(dni l-nop-imm "nop uimm16"
     ((MACH ORBIS-MACHS))
     "l.nop ${uimm16}"
     (+ OPC_NOP (f-op-25-2 #x1) (f-resv-23-8 0) uimm16)
     (c-call VOID "@cpu@_nop" (zext UWI uimm16))
     ()
     )

(if (application-is? SIMULATOR)
    (begin)
    (begin
      (dni l-nop "nop"
           ((MACH ORBIS-MACHS))
           "l.nop"
           (+ OPC_NOP (f-op-25-2 #x1) (f-resv-23-8 0) uimm16)
           (nop)
           ()
           )
      )
)

(dni l-movhi "movhi reg/uimm16"
     ((MACH ORBIS-MACHS))
     "l.movhi $rD,$uimm16"
     (+ OPC_MOVHIMACRC rD (f-resv-20-4 0) OPC_MOVHIMACRC_MOVHI uimm16)
     (set UWI rD (sll UWI (zext UWI uimm16) (const 16)))
     ()
)

(dni l-macrc "macrc reg"
     ((MACH ORBIS-MACHS))
     "l.macrc $rD"
     (+ OPC_MOVHIMACRC rD (f-resv-20-4 0) OPC_MOVHIMACRC_MACRC (f-uimm16 0))
     (sequence ()
               (set UWI rD mac-maclo)
               (set UWI mac-maclo 0)
               (set UWI mac-machi 0)
               )
     ()
)


; System releated instructions

(dni l-mfspr "mfspr"
     ((MACH ORBIS-MACHS))
     "l.mfspr $rD,$rA,${uimm16}"
     (+ OPC_MFSPR rD rA uimm16)
     (set UWI rD (c-call UWI "@cpu@_mfspr" (or rA (zext UWI uimm16))))
     ()
)

(dni l-mtspr "mtspr"
     ((MACH ORBIS-MACHS))
     "l.mtspr $rA,$rB,${uimm16-split}"
     (+ OPC_MTSPR rA rB uimm16-split )
     (c-call VOID "@cpu@_mtspr" (or rA (zext WI uimm16-split)) rB)
     ()
)


; Load instructions
(define-pmacro (load-store-addr base offset size)
  (c-call AI "@cpu@_make_load_store_addr" base (ext SI offset) size))

(dni l-lwz "l.lwz reg/simm16(reg)"
     ((MACH ORBIS-MACHS))
     "l.lwz $rD,${simm16}($rA)"
     (+ OPC_LWZ rD rA simm16)
     (set UWI rD (zext UWI (mem USI (load-store-addr rA simm16 4))))
     ()
)


(dni l-lws "l.lws reg/simm16(reg)"
     ((MACH ORBIS-MACHS))
     "l.lws $rD,${simm16}($rA)"
     (+ OPC_LWS rD rA simm16)
     (set WI rD (ext WI (mem SI (load-store-addr rA simm16 4))))
     ()
)

(dni l-lwa "l.lwa reg/simm16(reg)"
     ((MACH ORBIS-MACHS))
     "l.lwa $rD,${simm16}($rA)"
     (+ OPC_LWA rD rA simm16)
     (sequence ()
               (set UWI rD (zext UWI (mem USI (load-store-addr rA simm16 4))))
               (set atomic-reserve (const 1))
               (set atomic-address (load-store-addr rA simm16 4))
               )
     ()
)

(dni l-lbz "l.lbz reg/simm16(reg)"
     ((MACH ORBIS-MACHS))
     "l.lbz $rD,${simm16}($rA)"
     (+ OPC_LBZ rD rA simm16)
     (set UWI rD (zext UWI (mem UQI (load-store-addr rA simm16 1))))
     ()
)

(dni l-lbs "l.lbs reg/simm16(reg)"
     ((MACH ORBIS-MACHS))
     "l.lbs $rD,${simm16}($rA)"
     (+ OPC_LBS rD rA simm16)
     (set WI rD (ext WI (mem QI (load-store-addr rA simm16 1))))
     ()
)

(dni l-lhz "l.lhz reg/simm16(reg)"
     ((MACH ORBIS-MACHS))
     "l.lhz $rD,${simm16}($rA)"
     (+ OPC_LHZ rD simm16 rA)
     (set UWI rD (zext UWI (mem UHI (load-store-addr rA simm16 2))))
     ()
)

(dni l-lhs "l.lhs reg/simm16(reg)"
     ((MACH ORBIS-MACHS))
     "l.lhs $rD,${simm16}($rA)"
     (+ OPC_LHS rD rA simm16)
     (set WI rD (ext WI (mem HI (load-store-addr rA simm16 2))))
     ()
)


; Store instructions

(define-pmacro (store-insn mnemonic opc-op mode size)
  (begin
     (dni (.sym l- mnemonic)
          (.str "l." mnemonic " simm16(reg)/reg")
          ((MACH ORBIS-MACHS))
          (.str "l." mnemonic " ${simm16-split}($rA),$rB")
          (+ opc-op rA rB simm16-split)
          (sequence ((SI addr))
            (set addr (load-store-addr rA simm16-split size))
            (set mode (mem mode addr) (trunc mode rB))
            (if (eq (and addr #xffffffc) atomic-address)
            (set atomic-reserve (const 0))
            )
                    )
          ()
     )
   )
)

(store-insn sw OPC_SW USI 4)
(store-insn sb OPC_SB UQI 1)
(store-insn sh OPC_SH UHI 2)

(dni l-swa "l.swa simm16(reg)/reg"
     ((MACH ORBIS-MACHS))
     "l.swa ${simm16-split}($rA),$rB"
     (+ OPC_SWA rA rB simm16)
     (sequence ((SI addr) (BI flag))
           (set addr (load-store-addr rA simm16-split 4))
           (set sys-sr-f (and atomic-reserve (eq addr atomic-address)))
           (if sys-sr-f
           (set USI (mem USI addr) (trunc USI rB))
           )
           (set atomic-reserve (const 0))
           )
     ()
)


; Shift and rotate instructions

(define-pmacro (shift-insn mnemonic)
  (begin
     (dni (.sym l- mnemonic)
          (.str "l." mnemonic " reg/reg/reg")
          ((MACH ORBIS-MACHS))
          (.str "l." mnemonic " $rD,$rA,$rB")
          (+ OPC_ALU rD rA rB (f-resv-10-3 0) (.sym OPC_SHROTS_ (.upcase mnemonic)) (f-resv-5-2 0) 
         OPC_ALU_REGREG_SHROT )
          (set UWI rD (mnemonic rA rB))
          ()
     )
     (dni (.sym l- mnemonic "i")
          (.str "l." mnemonic " reg/reg/uimm6")
          ((MACH ORBIS-MACHS))
          (.str "l." mnemonic "i $rD,$rA,${uimm6}")
          (+ OPC_SHROTI rD rA (f-resv-15-8 0) (.sym OPC_SHROTS_ (.upcase mnemonic)) uimm6)
          (set rD (mnemonic rA uimm6))
          ()
     )
   )
)

(shift-insn sll)
(shift-insn srl)
(shift-insn sra)
(shift-insn ror)


; Arithmetic insns

; ALU op macro
(define-pmacro (alu-insn mnemonic)
  (begin
     (dni (.sym l- mnemonic)
          (.str "l." mnemonic " reg/reg/reg")
          ((MACH ORBIS-MACHS))
          (.str "l." mnemonic " $rD,$rA,$rB")
          (+ OPC_ALU rD rA rB (f-resv-10-7 0) (.sym OPC_ALU_REGREG_ (.upcase mnemonic)))
          (set rD (mnemonic rA rB))
          ()
     )
  )
)

(alu-insn and)
(alu-insn or)
(alu-insn xor)

(define-pmacro (alu-carry-insn mnemonic)
  (begin
    (dni (.sym l- mnemonic)
         (.str "l." mnemonic " reg/reg/reg")
         ((MACH ORBIS-MACHS))
         (.str "l." mnemonic " $rD,$rA,$rB")
         (+ OPC_ALU rD rA rB (f-resv-10-7 #x00) (.sym OPC_ALU_REGREG_ (.upcase mnemonic)))
         (sequence ()
                   (sequence ()
                             (set BI sys-sr-cy ((.sym mnemonic "c-cflag") WI rA rB 0))
                             (set BI sys-sr-ov ((.sym mnemonic "c-oflag") WI rA rB 0))
                             (set rD (mnemonic WI rA rB))
                             )
                   (if (andif sys-sr-ov sys-sr-ove)
                       (raise-exception EXCEPT-RANGE))
                   )
         ()
         )
    )
  )

(alu-carry-insn add)
(alu-carry-insn sub)

(dni (l-addc) "l.addc reg/reg/reg"
          ((MACH ORBIS-MACHS))
          ("l.addc $rD,$rA,$rB")
          (+ OPC_ALU rD rA rB (f-resv-10-7 #x00) OPC_ALU_REGREG_ADDC)
          (sequence ()
                    (sequence ((BI tmp-sys-sr-cy))
                              (set BI tmp-sys-sr-cy sys-sr-cy)
                              (set BI sys-sr-cy (addc-cflag WI rA rB tmp-sys-sr-cy))
                              (set BI sys-sr-ov (addc-oflag WI rA rB tmp-sys-sr-cy))
                              (set rD (addc WI rA rB tmp-sys-sr-cy))
                              )
                   (if (andif sys-sr-ov sys-sr-ove)
                       (raise-exception EXCEPT-RANGE))
                   )
          ()
)

(dni (l-mul) "l.mul reg/reg/reg"
     ((MACH ORBIS-MACHS))
     ("l.mul $rD,$rA,$rB")
     (+ OPC_ALU rD rA rB (f-resv-10-7 #x30) OPC_ALU_REGREG_MUL)
     (sequence ()
    (sequence ()
       (set BI sys-sr-ov (mul-o2flag WI rA rB))
       (set rD (mul WI rA rB))
    )
    (if (andif sys-sr-ov sys-sr-ove)
        (raise-exception EXCEPT-RANGE))
     )
     ()
)

(dni (l-muld) "l.muld reg/reg"
     ((MACH ORBIS-MACHS))
     ("l.muld $rA,$rB")
     (+ OPC_ALU (f-resv-25-5 0) rA rB (f-resv-10-7 #x30) OPC_ALU_REGREG_MULD)
     (sequence ((DI result))
    (set DI result (mul DI (ext DI rA) (ext DI rB)))
    (set SI mac-machi (subword SI result 0))
    (set SI mac-maclo (subword SI result 1))
     )
     ()
)

(dni (l-mulu) "l.mulu reg/reg/reg"
          ((MACH ORBIS-MACHS))
          ("l.mulu $rD,$rA,$rB")
          (+ OPC_ALU rD rA rB (f-resv-10-7 #x30) OPC_ALU_REGREG_MULU)
          (sequence ()
                    (sequence ()
                              (set BI sys-sr-cy (mul-o1flag UWI rA rB))
                              (set rD (mul UWI rA rB))
                              )
                    (if (andif sys-sr-cy sys-sr-ove)
                        (raise-exception EXCEPT-RANGE))
                    )
          ()
)

(dni (l-muldu) "l.muld reg/reg"
     ((MACH ORBIS-MACHS))
     ("l.muldu $rA,$rB")
     (+ OPC_ALU (f-resv-25-5 0) rA rB (f-resv-10-7 #x30) OPC_ALU_REGREG_MULDU)
     (sequence ((DI result))
    (set DI result (mul DI (zext DI rA) (zext DI rB)))
    (set SI mac-machi (subword SI result 0))
    (set SI mac-maclo (subword SI result 1))
     )
     ()
)

(dni l-div "divide (signed)"
     ((MACH ORBIS-MACHS))
     "l.div $rD,$rA,$rB"
     (+ OPC_ALU rD rA rB (f-resv-10-7 #x30) OPC_ALU_REGREG_DIV)
     (if (ne rB 0)
    (sequence ()
           (set BI sys-sr-ov 0)
           (set WI rD (div WI rA rB))
        )
    (sequence ()
           (set BI sys-sr-ov 1)
           (if sys-sr-ove
               (raise-exception EXCEPT-RANGE))
        )
     )
     ()
)

(dni l-divu "divide (unsigned)"
     ((MACH ORBIS-MACHS))
     "l.divu $rD,$rA,$rB"
     (+ OPC_ALU rD rA rB (f-resv-10-7 #x30) OPC_ALU_REGREG_DIVU)
     (if (ne rB 0)
    (sequence ()
       (set BI sys-sr-cy 0)
       (set rD (udiv UWI rA rB))
        )
    (sequence ()
       (set BI sys-sr-cy 1)
       (if sys-sr-ove
           (raise-exception EXCEPT-RANGE))
        )
     )
     ()
)

(dni l-ff1 "find first '1'"
          ((MACH ORBIS-MACHS))
          "l.ff1 $rD,$rA"
          (+ OPC_ALU rD rA rB (f-resv-10-7 #x00) OPC_ALU_REGREG_FFL1)
          (set rD (c-call UWI "@cpu@_ff1" rA))
          ()
)

(dni l-fl1 "find last '1'"
          ((MACH ORBIS-MACHS))
          "l.fl1 $rD,$rA"
          (+ OPC_ALU rD rA rB (f-resv-10-7 #x10) OPC_ALU_REGREG_FFL1)
          (set rD (c-call UWI "@cpu@_fl1" rA))
          ()
)


(define-pmacro (alu-insn-simm  mnemonic)
  (begin
      (dni (.sym l- mnemonic "i")
          (.str "l." mnemonic " reg/reg/simm16")
          ((MACH ORBIS-MACHS))
          (.str "l." mnemonic "i $rD,$rA,$simm16")
          (+ (.sym OPC_ (.upcase mnemonic) "I") rD rA simm16)
          (set rD (mnemonic rA (ext WI simm16)))
          ()
     )
   )
)

(define-pmacro (alu-insn-uimm  mnemonic)
  (begin
      (dni (.sym l- mnemonic "i")
          (.str "l." mnemonic " reg/reg/uimm16")
          ((MACH ORBIS-MACHS))
          (.str "l." mnemonic "i $rD,$rA,$uimm16")
          (+ (.sym OPC_ (.upcase mnemonic) "I") rD rA uimm16)
          (set rD (mnemonic rA (zext UWI uimm16)))
          ()
     )
   )
)

(alu-insn-uimm and)
(alu-insn-uimm or)
(alu-insn-simm xor)

(define-pmacro (alu-carry-insn-simm mnemonic)
  (begin
    (dni (.sym l- mnemonic "i")
         (.str "l." mnemonic "i reg/reg/simm16")
         ((MACH ORBIS-MACHS))
         (.str "l." mnemonic "i $rD,$rA,$simm16")
         (+ (.sym OPC_ (.upcase mnemonic) "I") rD rA simm16)
         (sequence ()
                   (sequence ()
                             (set BI sys-sr-cy ((.sym mnemonic "c-cflag") WI rA (ext WI simm16) 0))
                             (set BI sys-sr-ov ((.sym mnemonic "c-oflag") WI rA (ext WI simm16) 0))
                             (set rD (mnemonic WI rA (ext WI simm16)))
                             )
                   (if (andif sys-sr-ov sys-sr-ove)
                       (raise-exception EXCEPT-RANGE))
                   )
         ()
         )
    )
  )

(alu-carry-insn-simm add)

(dni (l-addic)
     ("l.addic reg/reg/simm16")
     ((MACH ORBIS-MACHS))
     ("l.addic $rD,$rA,$simm16")
     (+ OPC_ADDIC rD rA simm16)
     (sequence ()
               (sequence ((BI tmp-sys-sr-cy))
                         (set BI tmp-sys-sr-cy sys-sr-cy)
                         (set BI sys-sr-cy (addc-cflag WI rA (ext WI simm16) tmp-sys-sr-cy))
                         (set BI sys-sr-ov (addc-oflag WI rA (ext WI simm16) tmp-sys-sr-cy))
                         (set WI rD (addc WI rA (ext WI simm16) tmp-sys-sr-cy))
                         )
               (if (andif sys-sr-ov sys-sr-ove)
                   (raise-exception EXCEPT-RANGE))
               )
     ()
)

(dni (l-muli)
     "l.muli reg/reg/simm16"
     ((MACH ORBIS-MACHS))
     ("l.muli $rD,$rA,$simm16")
     (+ OPC_MULI rD rA simm16)
     (sequence ()
               (sequence ()
                         (set sys-sr-ov (mul-o2flag WI rA (ext WI simm16)))
                         (set rD (mul WI rA (ext WI simm16)))
                         )
               (if (andif sys-sr-ov sys-sr-ove)
                   (raise-exception EXCEPT-RANGE))
               )
     ()
)

(define-pmacro (extbh-insn mnemonic extop extmode truncmode)
  (begin
    (dni (.sym l- mnemonic)
         (.str "l." mnemonic " reg/reg")
         ((MACH ORBIS-MACHS))
         (.str "l." mnemonic " $rD,$rA")
         (+ OPC_ALU rD rA (f-resv-15-6 0) (.sym OPC_EXTBHS_ (.upcase mnemonic)) (f-resv-5-2 0) OPC_ALU_REGREG_EXTBH)
         (set rD (extop extmode (trunc truncmode rA)))
         ()
         )
    )
  )

(extbh-insn exths ext  WI  HI)
(extbh-insn extbs ext  WI  QI)
(extbh-insn exthz zext UWI UHI)
(extbh-insn extbz zext UWI UQI)

(define-pmacro (extw-insn mnemonic extop extmode truncmode)
  (begin
    (dni (.sym l- mnemonic)
         (.str "l." mnemonic " reg/reg")
         ((MACH ORBIS-MACHS))
         (.str "l." mnemonic " $rD,$rA")
         (+ OPC_ALU rD rA (f-resv-15-6 0) (.sym OPC_EXTWS_ (.upcase mnemonic)) (f-resv-5-2 0) OPC_ALU_REGREG_EXTW)
         (set rD (extop extmode (trunc truncmode rA)))
         ()
         )
    )
  )

(extw-insn extws ext  WI  SI)
(extw-insn extwz zext USI USI)

(dni l-cmov
     "l.cmov reg/reg/reg"
     ((MACH ORBIS-MACHS))
     "l.cmov $rD,$rA,$rB"
     (+ OPC_ALU rD rA rB (f-resv-10-1 0) (f-op-9-2 0) (f-resv-7-4 0) OPC_ALU_REGREG_CMOV)
     (if sys-sr-f
         (set UWI rD rA)
         (set UWI rD rB)
         )
     ()
     )

; Compare instructions

; Ordering compare
(define-pmacro (sf-insn op)
  (begin
     (dni (.sym l- "sf" op "s")                                               ; l-sfgts
          (.str "l.sf" op "s reg/reg")                                        ; "l.sfgts reg/reg"
          ((MACH ORBIS-MACHS))
          (.str "l.sf" op "s $rA,$rB")                                        ; "l.sfgts $rA,$rB"
          (+ OPC_SF (.sym "OPC_SF_" (.upcase op) "S") rA rB (f-resv-10-11 0)) ; (+ OPC_SF OPC_SF_GTS rA rB (f-resv-10-11 0))
          (set sys-sr-f (op WI rA rB))                                        ; (set sys-sr-f (gt WI rA rB))
          ()
          )
     (dni (.sym l- "sf" op "si")                                              ; l-sfgtsi
          (.str "l.sf" op "si reg/simm16")                                    ; "l.sfgtsi reg/simm16"
          ((MACH ORBIS-MACHS))
          (.str "l.sf" op "si $rA,$simm16")                                   ; "l.sfgtsi $rA,$simm16"
          (+ OPC_SFI (.sym "OPC_SF_" (.upcase op) "S") rA simm16)             ; (+ OPC_SFI OPC_SF_GTS rA simm16)
          (set sys-sr-f (op WI rA (ext WI simm16)))                           ; (set sys-sr-f (gt WI rA (ext WI simm16)))
          ()
          )
     (dni (.sym l- "sf" op "u")                                               ; l-sfgtu
          (.str "l.sf" op "u reg/reg")                                        ; "l.sfgtu reg/reg"
          ((MACH ORBIS-MACHS))
          (.str "l.sf" op "u $rA,$rB")                                        ; "l.sfgtu $rA,$rB"
          (+ OPC_SF (.sym "OPC_SF_" (.upcase op) "U") rA rB (f-resv-10-11 0)) ; (+ OPC_SF OPC_SF_GTU rA rB (f-resv-10-11 0))
          (set sys-sr-f ((.sym op "u") WI rA rB))                             ; (set sys-sr-f (gtu WI rA rB))
          ()
          )
     ; immediate is sign extended even for unsigned compare
     (dni (.sym l- "sf" op "ui")                                              ; l-sfgtui
          (.str "l.sf" op "ui reg/simm16")                                    ; "l.sfgtui reg/uimm16"
          ((MACH ORBIS-MACHS))
          (.str "l.sf" op "ui $rA,$simm16")                                   ; "l.sfgtui $rA,$simm16"
          (+ OPC_SFI (.sym "OPC_SF_" (.upcase op) "U") rA simm16)             ; (+ OPC_SFI OPC_SF_GTU rA simm16)
          (set sys-sr-f ((.sym op "u") WI rA (ext WI simm16)))                ; (set sys-sr-f (gtu WI rA (ext WI simm16)))
          ()
          )
     )
  )

(sf-insn gt)
(sf-insn ge)
(sf-insn lt)
(sf-insn le)

; Equality compare
(define-pmacro (sf-insn-eq op)
  (begin
     (dni (.sym l- "sf" op)
          (.str "l." op " reg/reg")
          ((MACH ORBIS-MACHS))
          (.str "l.sf" op " $rA,$rB")
          (+ OPC_SF (.sym "OPC_SF_" (.upcase op)) rA rB (f-resv-10-11 0))
          (set sys-sr-f (op WI rA rB))
          ()
     )
     (dni (.sym l- "sf" op "i")
          (.str "l.sf" op "i reg/simm16")
          ((MACH ORBIS-MACHS))
          (.str "l.sf" op "i $rA,$simm16")
          (+ OPC_SFI (.sym "OPC_SF_" (.upcase op)) rA simm16)
          (set sys-sr-f (op WI rA (ext WI simm16)))
          ()
     )
   )
)

(sf-insn-eq eq)
(sf-insn-eq ne)

(dni l-mac
     "l.mac reg/reg"
     ((MACH ORBIS-MACHS))
     "l.mac $rA,$rB"
     (+  OPC_MAC (f-op-25-5 0) rA rB (f-resv-10-7 0) OPC_MAC_MAC)
     (sequence ()
    (sequence ((DI prod) (DI mac) (DI result))
       (set DI prod (mul DI (ext DI rA) (ext DI rB)))
       (set DI mac (join DI SI mac-machi mac-maclo))
       (set DI result (add prod mac))
       (set SI mac-machi (subword SI result 0))
       (set SI mac-maclo (subword SI result 1))
       (set BI sys-sr-ov (addc-oflag prod mac 0))
    )
    (if (andif sys-sr-ov sys-sr-ove)
        (raise-exception EXCEPT-RANGE))
     )
     ()
)

(dni l-maci
     "l.maci reg/simm16"
     ((MACH ORBIS-MACHS))
     "l.maci $rA,${simm16}"
     (+ OPC_MACI (f-resv-25-5 0) rA simm16)
     (sequence ()
    (sequence ((DI prod) (DI mac) (DI result))
       (set DI prod (mul DI (ext DI rA) (ext DI simm16)))
       (set DI mac (join DI SI mac-machi mac-maclo))
       (set DI result (add mac prod))
       (set SI mac-machi (subword SI result 0))
       (set SI mac-maclo (subword SI result 1))
       (set BI sys-sr-ov (addc-oflag prod mac 0))
    )
    (if (andif sys-sr-ov sys-sr-ove)
        (raise-exception EXCEPT-RANGE))
     )
     ()
)

(dni l-macu
     "l.macu reg/reg"
     ((MACH ORBIS-MACHS))
     "l.macu $rA,$rB"
     (+  OPC_MAC (f-op-25-5 0) rA rB (f-resv-10-7 0) OPC_MAC_MACU)
     (sequence ()
    (sequence ((DI prod) (DI mac) (DI result))
       (set DI prod (mul DI (zext DI rA) (zext DI rB)))
       (set DI mac (join DI SI mac-machi mac-maclo))
       (set DI result (add prod mac))
       (set SI mac-machi (subword SI result 0))
       (set SI mac-maclo (subword SI result 1))
       (set BI sys-sr-cy (addc-cflag prod mac 0))
    )
    (if (andif sys-sr-cy sys-sr-ove)
        (raise-exception EXCEPT-RANGE))
     )
     ()
)

(dni l-msb
     "l.msb reg/reg"
     ((MACH ORBIS-MACHS))
     "l.msb $rA,$rB"
     (+  OPC_MAC (f-op-25-5 0) rA rB (f-resv-10-7 0) OPC_MAC_MSB)
     (sequence ()
    (sequence ((DI prod) (DI mac) (DI result))
       (set DI prod (mul DI (ext DI rA) (ext DI rB)))
       (set DI mac (join DI SI mac-machi mac-maclo))
       (set DI result (sub mac prod))
       (set SI mac-machi (subword SI result 0))
       (set SI mac-maclo (subword SI result 1))
       (set BI sys-sr-ov (subc-oflag mac result 0))
    )
    (if (andif sys-sr-ov sys-sr-ove)
        (raise-exception EXCEPT-RANGE))
     )
     ()
)

(dni l-msbu
     "l.msbu reg/reg"
     ((MACH ORBIS-MACHS))
     "l.msbu $rA,$rB"
     (+  OPC_MAC (f-op-25-5 0) rA rB (f-resv-10-7 0) OPC_MAC_MSBU)
     (sequence ()
    (sequence ((DI prod) (DI mac) (DI result))
       (set DI prod (mul DI (zext DI rA) (zext DI rB)))
       (set DI mac (join DI SI mac-machi mac-maclo))
       (set DI result (sub mac prod))
       (set SI mac-machi (subword SI result 0))
       (set SI mac-maclo (subword SI result 1))
       (set BI sys-sr-cy (subc-cflag mac result 0))
    )
    (if (andif sys-sr-cy sys-sr-ove)
        (raise-exception EXCEPT-RANGE))
     )
     ()
)

(define-pmacro (cust-insn cust-num)
  (begin
    (dni (.sym l- "cust" cust-num)
         (.str "l.cust" cust-num)
         ((MACH ORBIS-MACHS))
         (.str "l.cust" cust-num)
         (+ (.sym OPC_CUST cust-num) (f-resv-25-26 0))
         (nop)
         ()
         )
    )
  )

(cust-insn "1")
(cust-insn "2")
(cust-insn "3")
(cust-insn "4")
(cust-insn "5")
(cust-insn "6")
(cust-insn "7")
;(cust-insn "8")

(define-normal-insn-enum insn-opcode-dsp
  "DSP insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_ f-op-7-4
  (("ADD"   #x4)    ;; add/sub
   ("SEL"   #x5)    ;; select
   ("PACK"  #x6)    ;; pack, shift
   ("LOGIC" #x7)    ;; logic
   ("MUL"   #x8)    ;; mul halfword
   ("MULW"  #x9)    ;; mul fullword with halfword
   ("MISC"  #xC)    ;; extension/reverse
   )
  )

(define-normal-insn-enum insn-opcode-cmp-dst
  "compare insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_CMP_DST_ f-op-1-1
  (("D"  #x0)    ;; rD
   ("F"  #x1)    ;; F flag
   )
  )
(define-normal-insn-enum insn-opcode-cmp-sign
  "compare insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_CMP_ f-op-2-1
  (("SIGN"  #x0)
   ("UNSIGN"  #x1)
   )
  )

(define-normal-insn-enum insn-opcode-cmp-anding
  "compare insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_CMP_ f-op-3-1
  (("OR"  #x0)
   ("AND"  #x1)
   )
  )

(define-normal-insn-enum insn-opcode-cmp-size
  "compare insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_SIZE_ f-op-0-1
  (("BYTE"  #x0)
   ("HALF"  #x1)
   )
  )

(define-normal-insn-enum insn-opcode-cmp
  "compare insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_CMP_ f-op-7-4
  (("EQ"  #x0)    ;; equal
   ("NE"  #x1)    ;; not equal
   ("GE"  #x4)    ;; greater or equal
   ("GT"  #x5)    ;; greater
   ("LE"  #x6)    ;; less or equal
   ("LT"  #x7)    ;; less
   )
  )

(define-normal-insn-enum insn-opcode-addsub
  "add/sub insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_ADD_ f-op-3-4
  (("ADD_B"   #x0)    ;; add
   ("ADD_H"   #x1)    ;;
   ("SUB_B"   #x2)    ;; sub
   ("SUB_H"   #x3)    ;;
   ("ADDU_B"  #x4)    ;; add unsigned
   ("ADDU_H"  #x5)    ;;
   ("SUBU_B"  #x6)    ;; sub unsigned
   ("SUBU_H"  #x7)    ;;
   ("ADDS_B"  #x8)    ;; add saturated
   ("ADDS_H"  #x9)    ;;
   ("SUBS_B"  #xA)    ;; sub saturated
   ("SUBS_H"  #xB)    ;;
   ("ADDUS_B" #xC)    ;; add unsigned saturated
   ("ADDUS_H" #xD)    ;;
   ("SUBUS_B" #xE)    ;; sub unsigned saturated
   ("SUBUS_H" #xF)    ;;
   )
  )

(define-normal-insn-enum insn-opcode-sel
  "select insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_SEL_ f-op-3-4
  (("AVG_B"    #x0)    ;; average
   ("AVG_H"    #x1)    ;;
   ("MIN_B"    #x2)    ;; min
   ("MIN_H"    #x3)    ;;
   ("AVGU_B"   #x4)    ;; average unsigned
   ("AVGU_H"   #x5)    ;;
   ("MINU_B"   #x6)    ;; min unsigned
   ("MINU_H"   #x7)    ;;
   ("MUX_GE_B" #x8)    ;; mux
   ("MUX_GE_H" #x9)    ;;
   ("MAX_B"    #xA)    ;; max
   ("MAX_H"    #xB)    ;;
   ("MUX_OV_B" #xC)    ;; mux
   ("MUX_OV_H" #xD)    ;;
   ("MAXU_B"   #xE)    ;; max unsigned
   ("MAXU_H"   #xF)    ;;
   )
  )

(define-normal-insn-enum insn-opcode-pack
  "pack/shift insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_PACK_ f-op-3-4
  (("PACK_B"   #x0)    ;; pack
   ("PACK_H"   #x1)    ;;
   ("PACKS_B"  #x2)    ;; pack saturated
   ("PACKS_H"  #x3)    ;;
   ("PACKUS_B" #x4)    ;; pack unsigned saturated
   ("PACKUS_H" #x5)    ;;
   ("UNPACK_B" #x6)    ;; unpack signed
   ("UNPACK_H" #x7)    ;;
   ("RL_B"     #x8)    ;; rotate left
   ("RL_H"     #x9)    ;;
   ("SLL_B"    #xA)    ;; shift left logical
   ("SLL_H"    #xB)    ;;
   ("SRA_B"    #xC)    ;; shift right arithmetic
   ("SRA_H"    #xD)    ;;
   ("SRL_B"    #xE)    ;; shift right logical
   ("SRL_H"    #xF)    ;;
   )
  )

(define-normal-insn-enum insn-opcode-logic
  "logic insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_LOGIC_ f-op-3-4
  (("NAND"   #x0)    ;; nand
   ("NOR"    #x2)    ;; nor
   )
  )

(define-normal-insn-enum insn-opcode-mul
  "mul insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_MUL_ f-op-3-4
  (("MADDS_H"   #x0)    ;; mul add saturated
   ("MSUBS_H"   #x1)    ;; mul sub saturated
   ("MULS_H"    #x2)    ;; mul saturated
   ("MULH_H"    #x3)    ;; mul and get higher word
   ("MADDUS_H"  #x4)    ;; mul add unsigned saturated
   ("MSUBUS_H"  #x5)    ;; mul sub unsigned saturated
   ("MULUS_H"   #x6)    ;; mul unsigned saturated
   ("MULUH_H"   #x7)    ;; mul unsigned and get higher word
   ("MULBB_H"   #x8)    ;; mul bottom x bottom
   ("MULBT_H"   #x9)    ;; mul bottom x top
   ("MULTB_H"   #xA)    ;; mul top x bottom
   ("MULTT_H"   #xB)    ;; mul top x top
   ("MULUBB_H"  #xC)    ;; mul signed bottom x bottom
   ("MULUBT_H"  #xD)    ;; mul signed bottom x top
   ("MULUTB_H"  #xE)    ;; mul signed top x bottom
   ("MULUTT_H"  #xF)    ;; mul signed top x top
   )
  )

(define-normal-insn-enum insn-opcode-mulw
  "mul word insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_MULW_ f-op-3-4
  (("MULB_H"     #x0)    ;; mul word x halfword bottom saturated
   ("MULT_H"     #x1)    ;; mul word x halfword top saturated
   ("MULBH_H"    #x2)    ;; mul word x halfword bottom and get higher word
   ("MULTH_H"    #x3)    ;; mul word x halfword top and get higher word
   ("MULUB_H"    #x4)    ;; mul word x halfword bottom unsigned saturated
   ("MULUT_H"    #x5)    ;; mul word x halfword top unsigned saturated
   ("MULUBH_H"   #x6)    ;; mul word x halfword bottom unsigned and get higher word
   ("MULUTH_H"   #x7)    ;; mul word x halfword top and unsigned get higher word
   )
  )

(define-normal-insn-enum insn-opcode-move 
  "move insn opcode enums" ((MACH ORBIS-MACHS)) 
  OPC_DSP_ f-op-7-3
    (("MOVE" #x5 ))
)

(define-normal-insn-enum insn-opcode-move-size 
  "move insn opcode enums" ((MACH ORBIS-MACHS)) 
  OPC_DSP_ f-op-0-1
    (("SIZE_B" #x0 )
	 ("SIZE_H" #x1 )
	)
)

(define-normal-insn-enum insn-opcode-mul-size 
  "move insn opcode enums" ((MACH ORBIS-MACHS)) 
  OPC_DSP_MUL_ f-op-7-5
    (("HALF" #x11 )
     ("FULL" #x12 )
    )
)

(define-normal-insn-enum insn-opcode-ext
  "extension insn opcode enums" ((MACH ORBIS-MACHS))
  OPC_DSP_MISC_ f-op-3-4
  (("EXTBH"   #x0)    ;; signed extension byte to halfword
   ("EXTBW"   #x2)    ;; signed extension byte to word
   ("EXTHW"   #x3)    ;; signed extension halfword to word
   ("EXTUBH"  #x4)    ;; unsigned extension byte to halfword
   ("EXTUBW"  #x6)    ;; unsigned extension byte to word
   ("EXTUHW"  #x7)    ;; unsigned extension halfword to word
   ("REVH"    #x8)    ;; bit reverse for each halfword
   ("REV"     #x9)    ;; bit reverse
   ("REVBH"   #xA)    ;; byte reverse for each halfword
   ("REVB"    #xB)    ;; byte reverse
   )
  )

(define-pmacro (dsp-cmp-insn op op_str)
  (begin
    (dni(.sym ld-cmp- op_str -b)
        (.str "ld.cmp_" op_str ".b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.cmp_" op_str ".b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) (f-resv-3-1 0) OPC_DSP_CMP_SIGN OPC_DSP_CMP_DST_D OPC_DSP_SIZE_BYTE)
        (sequence ((QI d0) (QI d1) (QI d2) (QI d3))
          (if (op (subword QI rA 0) (subword QI rB 0)) (set QI d0 #xFF) (set QI d0 #x00))
          (if (op (subword QI rA 1) (subword QI rB 1)) (set QI d1 #xFF) (set QI d1 #x00))
          (if (op (subword QI rA 2) (subword QI rB 2)) (set QI d2 #xFF) (set QI d2 #x00))
          (if (op (subword QI rA 3) (subword QI rB 3)) (set QI d3 #xFF) (set QI d3 #x00))
          (set SI rD (join SI QI d3 d2 d1 d0))
        )
        ()
    )
    (dni(.sym ld-cmp- op_str -h)
        (.str "ld.cmp_" op_str ".h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.cmp_" op_str ".h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) (f-resv-3-1 0) OPC_DSP_CMP_SIGN OPC_DSP_CMP_DST_D OPC_DSP_SIZE_HALF)
        (sequence ((HI d0) (HI d1))
          (if (op (subword HI rA 0) (subword HI rB 0)) (set HI d0 #xFF) (set HI d0 #x00))
          (if (op (subword HI rA 1) (subword HI rB 1)) (set HI d1 #xFF) (set HI d1 #x00))
          (set SI rD (join SI HI d1 d0))
        )
        ()
    )
    (dni(.sym ld-all- op_str -b)
        (.str "ld.all_" op_str ".b reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.all_" op_str ".b $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_AND OPC_DSP_CMP_SIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_BYTE)
        (if (and (and 
          (op (subword QI rA 0) (subword QI rB 0))
          (op (subword QI rA 1) (subword QI rB 1)))
          (and 
          (op (subword QI rA 2) (subword QI rB 2))
          (op (subword QI rA 3) (subword QI rB 3))))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
    (dni(.sym ld-all- op_str -h)
        (.str "ld.all_" op_str ".h reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.all_" op_str ".h $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_AND OPC_DSP_CMP_SIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_HALF)
        (if (and 
          (op (subword HI rA 0) (subword HI rB 0))
          (op (subword HI rA 1) (subword HI rB 1)))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
    (dni(.sym ld-any- op_str -b)
        (.str "ld.any_" op_str ".b reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.any_" op_str ".b $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_OR OPC_DSP_CMP_SIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_BYTE)
        (if (or (or 
          (op (subword QI rA 0) (subword QI rB 0))
          (op (subword QI rA 1) (subword QI rB 1)))
          (or 
          (op (subword QI rA 2) (subword QI rB 2))
          (op (subword QI rA 3) (subword QI rB 3))))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
    (dni(.sym ld-any- op_str -h)
        (.str "ld.any_" op_str ".h reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.any_" op_str ".h $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_OR OPC_DSP_CMP_SIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_HALF)
        (if (or 
          (op (subword HI rA 0) (subword HI rB 0))
          (op (subword HI rA 1) (subword HI rB 1)))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
    (dni(.sym ld-cmpu- op_str -b)
        (.str "ld.cmpu_" op_str ".b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.cmpu_" op_str ".b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) (f-resv-3-1 0) OPC_DSP_CMP_UNSIGN OPC_DSP_CMP_DST_D OPC_DSP_SIZE_BYTE)
        (sequence ((QI d0) (QI d1) (QI d2) (QI d3))
          (if (op (subword QI rA 0) (subword QI rB 0)) (set QI d0 #xFF) (set QI d0 #x00))
          (if (op (subword QI rA 1) (subword QI rB 1)) (set QI d1 #xFF) (set QI d1 #x00))
          (if (op (subword QI rA 2) (subword QI rB 2)) (set QI d2 #xFF) (set QI d2 #x00))
          (if (op (subword QI rA 3) (subword QI rB 3)) (set QI d3 #xFF) (set QI d3 #x00))
          (set SI rD (join SI QI d3 d2 d1 d0))
        )
        ()
    )
    (dni(.sym ld-cmpu- op_str -h)
        (.str "ld.cmpu_" op_str ".h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.cmpu_" op_str ".h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) (f-resv-3-1 0) OPC_DSP_CMP_UNSIGN OPC_DSP_CMP_DST_D OPC_DSP_SIZE_HALF)
        (sequence ((HI d0) (HI d1))
          (if (op (subword HI rA 0) (subword HI rB 0)) (set HI d0 #xFF) (set HI d0 #x00))
          (if (op (subword HI rA 1) (subword HI rB 1)) (set HI d1 #xFF) (set HI d1 #x00))
          (set SI rD (join SI HI d1 d0))
        )
        ()
    )
    (dni(.sym ld-allu- op_str -b)
        (.str "ld.allu_" op_str ".b reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.allu_" op_str ".b $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_AND OPC_DSP_CMP_UNSIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_BYTE)
        (if (and (and 
          (op (subword QI rA 0) (subword QI rB 0))
          (op (subword QI rA 1) (subword QI rB 1)))
          (and 
          (op (subword QI rA 2) (subword QI rB 2))
          (op (subword QI rA 3) (subword QI rB 3))))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
    (dni(.sym ld-allu- op_str -h)
        (.str "ld.allu_" op_str ".h reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.allu_" op_str ".h $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_AND OPC_DSP_CMP_UNSIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_HALF)
        (if (and 
          (op (subword HI rA 0) (subword HI rB 0))
          (op (subword HI rA 1) (subword HI rB 1)))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
    (dni(.sym ld-anyu- op_str -b)
        (.str "ld.anyu_" op_str ".b reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.anyu_" op_str ".b $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_OR OPC_DSP_CMP_UNSIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_BYTE)
        (if (or (or 
          (op (subword QI rA 0) (subword QI rB 0))
          (op (subword QI rA 1) (subword QI rB 1)))
          (or 
          (op (subword QI rA 2) (subword QI rB 2))
          (op (subword QI rA 3) (subword QI rB 3))))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
    (dni(.sym ld-anyu- op_str -h)
        (.str "ld.anyu_" op_str ".h reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld.anyu_" op_str ".h $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 1) (.sym OPC_DSP_CMP_ (.upcase op_str)) OPC_DSP_CMP_OR OPC_DSP_CMP_UNSIGN OPC_DSP_CMP_DST_F OPC_DSP_SIZE_HALF)
        (if (or 
          (op (subword HI rA 0) (subword HI rB 0))
          (op (subword HI rA 1) (subword HI rB 1)))
          (set sys-sr-f 1) (set sys-sr-f 0))
        ()
    )
  )
)
 
(dsp-cmp-insn eq "eq")
(dsp-cmp-insn ne "ne")
(dsp-cmp-insn ge "ge")
(dsp-cmp-insn gt "gt")
(dsp-cmp-insn le "le")
(dsp-cmp-insn lt "lt")

(define-pmacro (saturate value low high)
  (if (le value low) low
    (if (ge value high) high
      value
    )
  )
)

(define-pmacro (dsp-alu-insn op op_str)
  (begin
    (dni(.sym ld- op_str -b)
        (.str "ld." op_str ".b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "_b"))))
        (sequence ((DI t0) (DI t1) (DI t2) (DI t3))
          (set DI t0 (op (ext DI (subword QI rA 0)) (ext DI (subword QI rB 0))))
          (set DI t1 (op (ext DI (subword QI rA 1)) (ext DI (subword QI rB 1))))
          (set DI t2 (op (ext DI (subword QI rA 2)) (ext DI (subword QI rB 2))))
          (set DI t3 (op (ext DI (subword QI rA 3)) (ext DI (subword QI rB 3))))
          (set SI rD (join SI QI (subword QI t3 0) (subword QI t2 0) (subword QI t1 0) (subword QI t0 0)))
        )
        ()
    )
    (dni(.sym ld- op_str -h)
        (.str "ld." op_str ".h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "_h"))))
        (sequence ((DI t0) (DI t1))
          (set DI t0 (op (ext DI (subword HI rA 0)) (ext DI (subword HI rB 0))))
          (set DI t1 (op (ext DI (subword HI rA 1)) (ext DI (subword HI rB 1))))
          (set SI rD (join SI HI (subword HI t1 0) (subword HI t0 0)))
        )
        ()
    )
    (dni(.sym ld- op_str s-b)
        (.str "ld." op_str "s.b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "s.b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "s_b"))))
        (sequence ((DI t0) (DI t1) (DI t2) (DI t3))
          (set DI t0 (saturate (op (ext DI (subword QI rA 0)) (ext DI (subword QI rB 0))) #x-80 #x7F))
          (set DI t1 (saturate (op (ext DI (subword QI rA 1)) (ext DI (subword QI rB 1))) #x-80 #x7F))
          (set DI t2 (saturate (op (ext DI (subword QI rA 2)) (ext DI (subword QI rB 2))) #x-80 #x7F))
          (set DI t3 (saturate (op (ext DI (subword QI rA 3)) (ext DI (subword QI rB 3))) #x-80 #x7F))
          (set SI rD (join SI QI (subword QI t3 0) (subword QI t2 0) (subword QI t1 0) (subword QI t0 0)))
        )
        ()
    )
    (dni(.sym ld- op_str s-h)
        (.str "ld." op_str "s.h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "s.h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "s_h"))))
        (sequence ((DI t0) (DI t1))
          (set DI t0 (saturate (op (ext DI (subword HI rA 0)) (ext DI (subword HI rB 0))) #x-8000 #x7FFF))
          (set DI t1 (saturate (op (ext DI (subword HI rA 1)) (ext DI (subword HI rB 1))) #x-8000 #x7FFF))
          (set SI rD (join SI HI (subword HI t1 0) (subword HI t0 0)))
        )
        ()
    )
    (dni(.sym ld- op_str u-b)
        (.str "ld." op_str "u.b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "u.b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "u_b"))))
        (sequence ((UDI t0) (UDI t1) (UDI t2) (UDI t3))
          (set UDI t0 (op (ext UDI (subword UQI rA 0)) (ext UDI (subword UQI rB 0))))
          (set UDI t1 (op (ext UDI (subword UQI rA 1)) (ext UDI (subword UQI rB 1))))
          (set UDI t2 (op (ext UDI (subword UQI rA 2)) (ext UDI (subword UQI rB 2))))
          (set UDI t3 (op (ext UDI (subword UQI rA 3)) (ext UDI (subword UQI rB 3))))
          (set USI rD (join USI UQI (subword UQI t3 0) (subword UQI t2 0) (subword UQI t1 0) (subword UQI t0 0)))
        )
        ()
    )
    (dni(.sym ld- op_str u-h)
        (.str "ld." op_str "u.h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "u.h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "u_h"))))
        (sequence ((UDI t0) (UDI t1))
          (set UDI t0 (op (ext UDI (subword UHI rA 0)) (ext UDI (subword UHI rB 0))))
          (set UDI t1 (op (ext UDI (subword UHI rA 1)) (ext UDI (subword UHI rB 1))))
          (set USI rD (join USI UHI (subword UHI t1 0) (subword UHI t0 0)))
        )
        ()
    )
    (dni(.sym ld- op_str us-b)
        (.str "ld." op_str "us.b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "us.b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "us_b"))))
        (sequence ((UDI t0) (UDI t1) (UDI t2) (UDI t3))
          (set UDI t0 (saturate (op (ext UDI (subword UQI rA 0)) (ext UDI (subword UQI rB 0))) #x00 #x7F))
          (set UDI t1 (saturate (op (ext UDI (subword UQI rA 1)) (ext UDI (subword UQI rB 1))) #x00 #xFF))
          (set UDI t2 (saturate (op (ext UDI (subword UQI rA 2)) (ext UDI (subword UQI rB 2))) #x00 #xFF))
          (set UDI t3 (saturate (op (ext UDI (subword UQI rA 3)) (ext UDI (subword UQI rB 3))) #x00 #xFF))
          (set USI rD (join USI UQI (subword UQI t3 0) (subword UQI t2 0) (subword UQI t1 0) (subword UQI t0 0)))
        )
        ()
    )
    (dni(.sym ld- op_str us-h)
        (.str "ld." op_str "us.h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "us.h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_ADD (.sym OPC_DSP_ADD_ (.upcase (.str op_str "us_h"))))
        (sequence ((UDI t0) (UDI t1))
          (set UDI t0 (saturate (op (ext UDI (subword UHI rA 0)) (ext UDI (subword UHI rB 0))) #x0000 #xFFFF))
          (set UDI t1 (saturate (op (ext UDI (subword UHI rA 1)) (ext UDI (subword UHI rB 1))) #x0000 #xFFFF))
          (set USI rD (join USI UHI (subword UHI t1 0) (subword UHI t0 0)))
        )
        ()
    )
  )
)

(dsp-alu-insn add "add")
(dsp-alu-insn sub "sub")

(define-pmacro (dsp-sel-avg-insn op_str)
  (begin
    (dni(.sym ld- op_str -b)
        (.str "ld." op_str ".b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "_b"))))
        (sequence ((QI d0) (QI d1) (QI d2) (QI d3))
          (set QI d0 (subword QI (div (add (ext SI (subword QI rA 0)) (ext SI (subword QI rB 0))) 2) 0))
          (set QI d1 (subword QI (div (add (ext SI (subword QI rA 1)) (ext SI (subword QI rB 1))) 2) 0))
          (set QI d2 (subword QI (div (add (ext SI (subword QI rA 2)) (ext SI (subword QI rB 2))) 2) 0))
          (set QI d3 (subword QI (div (add (ext SI (subword QI rA 3)) (ext SI (subword QI rB 3))) 2) 0))
          (set SI rD (join SI QI d3 d2 d1 d0))
        )
        ()
    )
    (dni(.sym ld- op_str -h)
        (.str "ld." op_str ".h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "_h"))))
        (sequence ((HI d0) (HI d1))
          (set HI d0 (subword HI (div (add (ext SI (subword HI rA 0)) (ext SI (subword HI rB 0))) 2) 0))
          (set HI d1 (subword HI (div (add (ext SI (subword HI rA 1)) (ext SI (subword HI rB 1))) 2) 0))
          (set SI rD (join SI HI d1 d0))
        )
        ()
    )
    (dni(.sym ld- op_str u-b)
        (.str "ld." op_str "u.b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "u.b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "u_b"))))
        (sequence ((UQI d0) (UQI d1) (UQI d2) (UQI d3))
          (set UQI d0 (subword UQI (div (add (ext USI (subword UQI rA 0)) (ext USI (subword UQI rB 0))) 2) 0))
          (set UQI d1 (subword UQI (div (add (ext USI (subword UQI rA 1)) (ext USI (subword UQI rB 1))) 2) 0))
          (set UQI d2 (subword UQI (div (add (ext USI (subword UQI rA 2)) (ext USI (subword UQI rB 2))) 2) 0))
          (set UQI d3 (subword UQI (div (add (ext USI (subword UQI rA 3)) (ext USI (subword UQI rB 3))) 2) 0))
          (set USI rD (join USI UQI d3 d2 d1 d0))
        )
        ()
    )
    (dni(.sym ld- op_str u-h)
        (.str "ld." op_str "u.h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "u.h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "u_h"))))
        (sequence ((UHI d0) (UHI d1))
          (set UHI d0 (subword UHI (div (add (ext USI (subword UHI rA 0)) (ext USI (subword UHI rB 0))) 2) 0))
          (set UHI d1 (subword UHI (div (add (ext USI (subword UHI rA 1)) (ext USI (subword UHI rB 1))) 2) 0))
          (set USI rD (join USI UHI d1 d0))
        )
        ()
    )
  )
)

(dsp-sel-avg-insn "avg")

(define-pmacro (dsp-sel-min-insn op op_str)
  (begin
    (dni(.sym ld- op_str -b)
        (.str "ld." op_str ".b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "_b"))))
        (sequence ((QI d0) (QI d1) (QI d2) (QI d3))
          (if (op (subword QI rA 0) (subword QI rB 0)) (set QI d0 (subword QI rA 0)) (set QI d0 (subword QI rB 0)))
          (if (op (subword QI rA 1) (subword QI rB 1)) (set QI d0 (subword QI rA 1)) (set QI d0 (subword QI rB 1)))
          (if (op (subword QI rA 2) (subword QI rB 2)) (set QI d0 (subword QI rA 2)) (set QI d0 (subword QI rB 2)))
          (if (op (subword QI rA 3) (subword QI rB 3)) (set QI d0 (subword QI rA 3)) (set QI d0 (subword QI rB 3)))
          (set SI rD (join SI QI d3 d2 d1 d0))
        )
        ()
    )
    (dni(.sym ld- op_str -h)
        (.str "ld." op_str ".h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "_h"))))
        (sequence ((QI d0) (QI d1) (QI d2) (QI d3))
          (if (op (subword QI rA 0) (subword QI rB 0)) (set QI d0 (subword QI rA 0)) (set QI d0 (subword QI rB 0)))
          (if (op (subword QI rA 1) (subword QI rB 1)) (set QI d0 (subword QI rA 1)) (set QI d0 (subword QI rB 1)))
          (if (op (subword QI rA 2) (subword QI rB 2)) (set QI d0 (subword QI rA 2)) (set QI d0 (subword QI rB 2)))
          (if (op (subword QI rA 3) (subword QI rB 3)) (set QI d0 (subword QI rA 3)) (set QI d0 (subword QI rB 3)))
          (set SI rD (join SI QI d3 d2 d1 d0))
        )
        ()
    )
    (dni(.sym ld- op_str u-b)
        (.str "ld." op_str "u.b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "u.b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "u_b"))))
        (sequence ((UQI d0) (UQI d1) (UQI d2) (UQI d3))
          (if (op (subword UQI rA 0) (subword UQI rB 0)) (set UQI d0 (subword UQI rA 0)) (set UQI d0 (subword UQI rB 0)))
          (if (op (subword UQI rA 1) (subword UQI rB 1)) (set UQI d0 (subword UQI rA 1)) (set UQI d0 (subword UQI rB 1)))
          (if (op (subword UQI rA 2) (subword UQI rB 2)) (set UQI d0 (subword UQI rA 2)) (set UQI d0 (subword UQI rB 2)))
          (if (op (subword UQI rA 3) (subword UQI rB 3)) (set UQI d0 (subword UQI rA 3)) (set UQI d0 (subword UQI rB 3)))
          (set USI rD (join USI UQI d3 d2 d1 d0))
        )
        ()
    )
    (dni(.sym ld- op_str u-h)
        (.str "ld." op_str "u.h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "u.h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "u_h"))))
        (sequence ((UQI d0) (UQI d1) (UQI d2) (UQI d3))
          (if (op (subword UQI rA 0) (subword UQI rB 0)) (set UQI d0 (subword UQI rA 0)) (set UQI d0 (subword UQI rB 0)))
          (if (op (subword UQI rA 1) (subword UQI rB 1)) (set UQI d0 (subword UQI rA 1)) (set UQI d0 (subword UQI rB 1)))
          (if (op (subword UQI rA 2) (subword UQI rB 2)) (set UQI d0 (subword UQI rA 2)) (set UQI d0 (subword UQI rB 2)))
          (if (op (subword UQI rA 3) (subword UQI rB 3)) (set UQI d0 (subword UQI rA 3)) (set UQI d0 (subword UQI rB 3)))
          (set USI rD (join USI UQI d3 d2 d1 d0))
        )
        ()
    )
  )
)

(dsp-sel-min-insn le "min")
(dsp-sel-min-insn ge "max")

(define-pmacro (dsp-sel-mux-insn op_str)
  (begin
    (dni(.sym ld- op_str -b)
        (.str "ld." op_str ".b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "_b"))))
        (set SI rD (join SI QI (subword QI rA 3) (subword QI rB 2) (subword QI rA 1) (subword QI rB 0)))
        ()
    )
    (dni(.sym ld- op_str -h)
        (.str "ld." op_str ".h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_SEL (.sym OPC_DSP_SEL_ (.upcase (.str op_str "_h"))))
        (set SI rD (join SI HI (subword HI rA 1) (subword HI rB 0)))
        ()
    )
  )
)

(dsp-sel-mux-insn "mux_ge")
(dsp-sel-mux-insn "mux_ov")

(define-pmacro (dsp-pack-insn size op_str op2)
  (begin
    (dni(.sym ld- op_str - op2)
        (.str "ld." op_str "." op2 " reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "." op2 " $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_PACK (.sym OPC_DSP_PACK_ (.upcase (.str op_str "_" op2))))
        (sequence ()
          (if (eq size 1)  ;; byte
            (sequence ()
              (set SI rD
                (join SI NI
                  (subword NI rA 6)
                  (subword NI rA 4)
                  (subword NI rA 2)
                  (subword NI rA 0)
                  (subword NI rB 6)
                  (subword NI rB 4)
                  (subword NI rB 2)
                  (subword NI rB 0)
                )
              )
            )
            (sequence ()
              (set SI rD
                (join SI QI
                  (subword QI rA 2)
                  (subword QI rA 0)
                  (subword QI rB 2)
                  (subword QI rB 0)
                )
              )
            )
          )
        )
        ()
    )
  )
)

(dsp-pack-insn 1 "pack" "b")
(dsp-pack-insn 2 "pack" "h")

(define-pmacro (dsp-pack-signed-insn size op_str op2)
  (begin
    (dni(.sym ld- op_str - op2)
        (.str "ld." op_str "." op2 " reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "." op2 " $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_PACK (.sym OPC_DSP_PACK_ (.upcase (.str op_str "_" op2))))
        (sequence ()
          (if (eq size 1)  ;; byte
            (sequence ()
              (set SI rD
                (join SI NI
                  (subword NI (saturate (subword QI rA 3) #x-8 #x7) 0)
                  (subword NI (saturate (subword QI rA 2) #x-8 #x7) 0)
                  (subword NI (saturate (subword QI rA 1) #x-8 #x7) 0)
                  (subword NI (saturate (subword QI rA 0) #x-8 #x7) 0)
                  (subword NI (saturate (subword QI rB 3) #x-8 #x7) 0)
                  (subword NI (saturate (subword QI rB 2) #x-8 #x7) 0)
                  (subword NI (saturate (subword QI rB 1) #x-8 #x7) 0)
                  (subword NI (saturate (subword QI rB 0) #x-8 #x7) 0)
                )
              )
            )
            (sequence ()
              (set SI rD
                (join SI QI
                  (subword QI (saturate (subword HI rA 1) #x-80 #x7F) 0)
                  (subword QI (saturate (subword HI rA 0) #x-80 #x7F) 0)
                  (subword QI (saturate (subword HI rB 1) #x-80 #x7F) 0)
                  (subword QI (saturate (subword HI rB 0) #x-80 #x7F) 0)
                )
              )
            )
          )
        )
        ()
    )
  )
)

(dsp-pack-signed-insn 1 "packs" "b")
(dsp-pack-signed-insn 2 "packs" "h")

(define-pmacro (dsp-pack-unsigned-insn size op_str op2)
  (begin
    (dni(.sym ld- op_str - op2)
        (.str "ld." op_str "." op2 " reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "." op2 " $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_PACK (.sym OPC_DSP_PACK_ (.upcase (.str op_str "_" op2))))
        (sequence ()
          (if (eq size 1)  ;; byte
            (sequence ()
              (set USI rD
                (join USI UNI
                  (subword UNI (saturate (subword UQI rA 3) #x0 #xF) 0)
                  (subword UNI (saturate (subword UQI rA 2) #x0 #xF) 0)
                  (subword UNI (saturate (subword UQI rA 1) #x0 #xF) 0)
                  (subword UNI (saturate (subword UQI rA 0) #x0 #xF) 0)
                  (subword UNI (saturate (subword UQI rB 3) #x0 #xF) 0)
                  (subword UNI (saturate (subword UQI rB 2) #x0 #xF) 0)
                  (subword UNI (saturate (subword UQI rB 1) #x0 #xF) 0)
                  (subword UNI (saturate (subword UQI rB 0) #x0 #xF) 0)
                )
              )
            )
            (sequence ()
              (set SI rD
                (join SI UQI
                  (subword UQI (saturate (subword UHI rA 1) #x0 #xFF) 0)
                  (subword UQI (saturate (subword UHI rA 0) #x0 #xFF) 0)
                  (subword UQI (saturate (subword UHI rB 1) #x0 #xFF) 0)
                  (subword UQI (saturate (subword UHI rB 0) #x0 #xFF) 0)
                )
              )
            )
          )
        )
        ()
    )
  )
)

(dsp-pack-unsigned-insn 1 "packus" "b")
(dsp-pack-unsigned-insn 2 "packus" "h")

(define-pmacro (dsp-unpack-signed-insn size op_str op2)
  (begin
    (dni(.sym ld- op_str - op2)
        (.str "ld." op_str "." op2 " reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "." op2 " $rD,$rA")
        (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_PACK (.sym OPC_DSP_PACK_ (.upcase (.str op_str "_" op2))))
        (sequence ()
          (if (eq size 1)  ;; byte
            (sequence ()
              (set SI rD
                (join SI QI
                  (ext QI (subword NI rA 3))
                  (ext QI (subword NI rA 2))
                  (ext QI (subword NI rA 1))
                  (ext QI (subword NI rA 0))
                )
              )
            )
            (sequence ()
              (set SI rD
                (join SI HI
                  (ext HI (subword QI rA 1))
                  (ext HI (subword QI rA 0))
                )
              )
            )
          )
        )
        ()
    )
  )
)

(dsp-unpack-signed-insn 1 "unpack" "b")
(dsp-unpack-signed-insn 2 "unpack" "h")

(define-pmacro (dsp-shrot-insn op op_str)
  (begin
    (dni(.sym ld- op_str -b)
        (.str "ld." op_str ".b reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".b $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_PACK (.sym OPC_DSP_PACK_ (.upcase (.str op_str "_b"))))
        (set SI rD
          (join SI QI
            (op (subword QI rA 3) (and rB #x7))
            (op (subword QI rA 2) (and rB #x7))
            (op (subword QI rA 1) (and rB #x7))
            (op (subword QI rA 0) (and rB #x7))
          )
        )
        ()
    )
    (dni(.sym ld- op_str -h)
        (.str "ld." op_str ".h reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str ".h $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_PACK (.sym OPC_DSP_PACK_ (.upcase (.str op_str "_h"))))
        (set SI rD
          (join SI HI
            (op (subword HI rA 1) (and rB #xF))
            (op (subword HI rA 0) (and rB #xF))
          )
        )
        ()
    )
  )
)

(dsp-shrot-insn rol "rl")
(dsp-shrot-insn sll "sll")
(dsp-shrot-insn sra "sra")
(dsp-shrot-insn srl "srl")

(define-pmacro (dsp-logic-insn op op_str)
  (begin
    (dni(.sym ld- op_str)
        (.str "ld." op_str " reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str " $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_LOGIC (.sym OPC_DSP_LOGIC_ (.upcase (.str op_str))))
        (set rD (not (op rA rB)))
        ()
    )
  )
)

(dsp-logic-insn and "nand")
(dsp-logic-insn or "nor")

(define-pmacro (dsp-mul-add-insn op op_str)
  (begin
    (dni(.sym ld- op_str s-h)
        (.str "ld." op_str "s.h" " reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "s.h" " $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 0) OPC_DSP_MUL (.sym OPC_DSP_MUL_ (.upcase (.str op_str "s_h"))))
        (sequence ((SI a0) (SI a1) (SI b0) (SI b1) (DI t0) (DI t1))
          (set SI a0 (ext (subword HI rA 0)))
          (set SI a1 (ext (subword HI rA 1)))
          (set SI b0 (ext (subword HI rB 0)))
          (set SI b1 (ext (subword HI rB 1)))
          (set DI t0 (op (ext DI mac-maclo) (ext DI (mul a0 b0))))
          (set DI t1 (op (ext DI mac-machi) (ext DI (mul a1 b1))))
          (set SI mac-maclo (subword SI (saturate t0 #x-80000000 #x7FFFFFFF) 0))
          (set SI mac-machi (subword SI (saturate t1 #x-80000000 #x7FFFFFFF) 0))
        )
        ()
    )
    (dni(.sym ld- op_str us-h)
        (.str "ld." op_str "us.h" " reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "us.h" " $rA,$rB")
        (+ OPC_DSP (f-resv-25-5 0) rA rB (f-resv-10-3 0) OPC_DSP_MUL (.sym OPC_DSP_MUL_ (.upcase (.str op_str "us_h"))))
        (sequence ((USI a0) (USI a1) (USI b0) (USI b1) (DI t0) (DI t1))
          (set USI a0 (ext (subword UHI rA 0)))
          (set USI a1 (ext (subword UHI rA 1)))
          (set USI b0 (ext (subword UHI rB 0)))
          (set USI b1 (ext (subword UHI rB 1)))
          (set DI t0 (op (zext DI mac-maclo) (zext DI (mul a0 b0))))
          (set DI t1 (op (zext DI mac-machi) (zext DI (mul a1 b1))))
          (set USI mac-maclo (subword USI (saturate t0 #x00000000 #xFFFFFFFF) 0))
          (set USI mac-machi (subword USI (saturate t1 #x00000000 #xFFFFFFFF) 0))
        )
        ()
    )
  )
)

(dsp-mul-add-insn add "madd")
(dsp-mul-add-insn sub "msub")

(define-pmacro (dsp-mul-basic-insn high op_str op_str2)
  (begin
    (dni(.sym ld- op_str op_str2 -h)
        (.str "ld." op_str op_str2 ".h" " reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str op_str2 ".h" " $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL (.sym OPC_DSP_MUL_ (.upcase (.str op_str op_str2 "_h"))))
        (sequence ((SI a0) (SI a1) (SI b0) (SI b1) (SI t0) (SI t1) (HI d0) (HI d1))
          (set SI a0 (ext (subword HI rA 0)))
          (set SI a1 (ext (subword HI rA 1)))
          (set SI b0 (ext (subword HI rB 0)))
          (set SI b1 (ext (subword HI rB 1)))
          (set SI t0 (mul a0 b0))
          (set SI t1 (mul a1 b1))
          (set HI d0 (if (eq high 1) (subword HI t0 1) (subword HI (saturate t0 #x-8000 #x7FFF) 0)))
          (set HI d1 (if (eq high 1) (subword HI t1 1) (subword HI (saturate t1 #x-8000 #x7FFF) 0)))
          (set SI rD (join SI HI d1 d0))
        )
        ()
    )
    (dni(.sym ld- op_str u op_str2 -h)
        (.str "ld." op_str "u" op_str2 ".h" " reg/reg/reg")
        ((MACH ORBIS-MACHS))
        (.str "ld." op_str "u" op_str2 ".h" " $rD,$rA,$rB")
        (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL (.sym OPC_DSP_MUL_ (.upcase (.str op_str "u" op_str2 "_h"))))
        (sequence ((USI a0) (USI a1) (USI b0) (USI b1) (USI t0) (USI t1) (UHI d0) (UHI d1))
          (set USI a0 (ext (subword UHI rA 0)))
          (set USI a1 (ext (subword UHI rA 1)))
          (set USI b0 (ext (subword UHI rB 0)))
          (set USI b1 (ext (subword UHI rB 1)))
          (set USI t0 (mul a0 b0))
          (set USI t1 (mul a1 b1))
          (set UHI d0 (if (eq high 1) (subword UHI t0 1) (subword UHI (saturate t0 #x0000 #xFFFF) 0)))
          (set UHI d1 (if (eq high 1) (subword UHI t1 1) (subword UHI (saturate t1 #x0000 #xFFFF) 0)))
          (set USI rD (join USI UHI d1 d0))
        )
        ()
    )
  )
)

(dsp-mul-basic-insn 0 "mul" "s")
(dsp-mul-basic-insn 1 "mul" "h")

(dni(.sym ld-mul)
    (.str "ld.mul reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.mul $rD,$rA $uimm1a,$rB $uimm1b")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL_HALF (f-resv-2-1 0) uimm1a uimm1b)
    (set SI rD (mul (ext SI (subword HI rA uimm1a)) (ext SI (subword HI rB uimm1b))))
    ()
)

(dni(.sym ld-mulu)
    (.str "ld.mulu reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.mulu $rD,$rA $uimm1a,$rB $uimm1b")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL_HALF (f-resv-2-1 1) uimm1a uimm1b)
    (set USI rD (mul (zext USI (subword UHI rA uimm1a)) (zext USI (subword UHI rB uimm1b))))
    ()
)

(dni(.sym ld-muls)
    (.str "ld.muls reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.muls $rD,$rA,$rB $uimm1b")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL_FULL (f-resv-2-1 0) (f-resv-1-1 0) uimm1b)
    (sequence ((DI t))
      (set DI t (mul (ext DI rA) (ext DI (subword HI rB uimm1b))))
      (set SI rD (subword SI (saturate t #x-800000000 #x7FFFFFFF) 0))
    )
    ()
)

(dni(.sym ld-mulh)
    (.str "ld.mulh reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.mulh $rD,$rA,$rB $uimm1b")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL_FULL (f-resv-2-1 0) (f-resv-1-1 1) uimm1b)
    (sequence ((DI t))
      (set DI t (mul (ext DI rA) (ext DI (subword HI rB uimm1b))))
      (set SI t (join SI HI (subword HI t 2) (subword HI t 1)))
    )
    ()
)

(dni(.sym ld-mulus)
    (.str "ld.muls reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.mulus $rD,$rA,$rB $uimm1b")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL_FULL (f-resv-2-1 1) (f-resv-1-1 0) uimm1b)
    (sequence ((UDI t))
      (set UDI t (mul (zext UDI rA) (zext UDI (subword UHI rB uimm1b))))
      (set USI rD (subword USI (saturate t #x000000000 #xFFFFFFFF) 0))
    )
    ()
)

(dni(.sym ld-muluh)
    (.str "ld.mulh reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.muluh $rD,$rA,$rB $uimm1b")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MUL_FULL (f-resv-2-1 1) (f-resv-1-1 1) uimm1b)
    (sequence ((UDI t))
      (set UDI t (mul (zext UDI rA) (zext UDI (subword UHI rB uimm1b))))
      (set USI t (join USI UHI (subword UHI t 2) (subword UHI t 1)))
    )
    ()
)

(dni(.sym ld-move-b)
    (.str "ld.move.b reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.move.b $rD $uimm2d,$rA,$rB $uimm2s")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MOVE uimm2s uimm2d OPC_DSP_SIZE_BYTE)
    (sequence ((QI t) (QI d0) (QI d1) (QI d2) (QI d3))
      (set QI t (subword QI rB uimm2s))
      (set QI d0 (if (eq uimm2d 0) t (subword QI rA 0)))
      (set QI d1 (if (eq uimm2d 1) t (subword QI rA 1)))
      (set QI d2 (if (eq uimm2d 2) t (subword QI rA 2)))
      (set QI d3 (if (eq uimm2d 3) t (subword QI rA 3)))
      (set SI rD (join SI QI d3 d2 d1 d0))
    )
    ()
)

(dni(.sym ld-move-h)
    (.str "ld.move.h reg/reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.move.h $rD $uimm1d,$rA,$rB $uimm1s")
    (+ OPC_DSP rD rA rB (f-resv-10-3 0) OPC_DSP_MOVE uimm1s (f-resv-3-1 0) uimm1d (f-resv-1-1 0) OPC_DSP_SIZE_HALF)
    (sequence ((HI t) (HI d0) (HI d1))
      (set HI t (subword QI rB uimm1s))
      (set HI d0 (if (eq uimm1d 0) t (subword HI rA 0)))
      (set HI d1 (if (eq uimm1d 1) t (subword HI rA 1)))
      (set SI rD (join SI HI d1 d0))
    )
    ()
)

(dni(.sym ld-extbh)
    (.str "ld.extbh reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.extbh $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_EXTBH)
    (set SI rD
      (join SI HI
        (ext HI (subword QI rA 2))
        (ext HI (subword QI rA 0))
      )
    )
    ()
)

(dni(.sym ld-extbw)
    (.str "ld.extbw reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.extbw $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_EXTBW)
    (set SI rD (ext SI (subword QI rA 0)))
    ()
)

(dni(.sym ld-exthw)
    (.str "ld.exthw reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.exthw $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_EXTHW)
    (set SI rD (ext SI (subword HI rA 0)))
    ()
)

(dni(.sym ld-extubh)
    (.str "ld.extubh reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.extubh $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_EXTUBH)
    (set USI rD
      (join USI UHI
        (zext UHI (subword UQI rA 2))
        (zext UHI (subword UQI rA 0))
      )
    )
    ()
)

(dni(.sym ld-extubw)
    (.str "ld.extubw reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.extubw $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_EXTUBW)
    (set USI rD (zext USI (subword UQI rA 0)))
    ()
)

(dni(.sym ld-extuhw)
    (.str "ld.extuhw reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.extuhw $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_EXTUHW)
    (set USI rD (zext USI (subword UHI rA 0)))
    ()
)

(dni(.sym ld-revh)
    (.str "ld.revh reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.revh $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_REVH)
    (set SI rD
      (join SI BI
        (subword BI rA 15)
        (subword BI rA 14)
        (subword BI rA 13)
        (subword BI rA 12)
        (subword BI rA 11)
        (subword BI rA 10)
        (subword BI rA  9)
        (subword BI rA  8)
        (subword BI rA  7)
        (subword BI rA  6)
        (subword BI rA  5)
        (subword BI rA  4)
        (subword BI rA  3)
        (subword BI rA  2)
        (subword BI rA  1)
        (subword BI rA  0)
        (subword BI rA 31)
        (subword BI rA 30)
        (subword BI rA 29)
        (subword BI rA 28)
        (subword BI rA 27)
        (subword BI rA 26)
        (subword BI rA 25)
        (subword BI rA 24)
        (subword BI rA 23)
        (subword BI rA 22)
        (subword BI rA 21)
        (subword BI rA 20)
        (subword BI rA 19)
        (subword BI rA 18)
        (subword BI rA 17)
        (subword BI rA 16)
      )
    )
    ()
)

(dni(.sym ld-rev)
    (.str "ld.rev reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.rev $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_REV)
    (set SI rD
      (join SI BI
        (subword BI rA 31)
        (subword BI rA 30)
        (subword BI rA 29)
        (subword BI rA 28)
        (subword BI rA 27)
        (subword BI rA 26)
        (subword BI rA 25)
        (subword BI rA 24)
        (subword BI rA 23)
        (subword BI rA 22)
        (subword BI rA 21)
        (subword BI rA 20)
        (subword BI rA 19)
        (subword BI rA 18)
        (subword BI rA 17)
        (subword BI rA 16)
        (subword BI rA 15)
        (subword BI rA 14)
        (subword BI rA 13)
        (subword BI rA 12)
        (subword BI rA 11)
        (subword BI rA 10)
        (subword BI rA  9)
        (subword BI rA  8)
        (subword BI rA  7)
        (subword BI rA  6)
        (subword BI rA  5)
        (subword BI rA  4)
        (subword BI rA  3)
        (subword BI rA  2)
        (subword BI rA  1)
        (subword BI rA  0)
      )
    )
    ()
)

(dni(.sym ld-revbh)
    (.str "ld.revbh reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.revbh $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_REVBH)
    (set SI rD
      (join SI QI
        (subword QI rA 2)
        (subword QI rA 3)
        (subword QI rA 0)
        (subword QI rA 1)
      )
    )
    ()
)

(dni(.sym ld-revb)
    (.str "ld.revb reg/reg")
    ((MACH ORBIS-MACHS))
    (.str "ld.revb $rD,$rA")
    (+ OPC_DSP rD rA (f-resv-15-8 0) OPC_DSP_MISC OPC_DSP_MISC_REVB)
    (set SI rD
      (join SI QI
        (subword QI rA 0)
        (subword QI rA 1)
        (subword QI rA 2)
        (subword QI rA 3)
      )
    )
    ()
)




